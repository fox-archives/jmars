/**
 * JSPICE wrapper code: autogenerated Wed Feb 22 13:03:13 MST 2012 with jni_wrap.pl.
 * <em>Randy's first real Java class and he writes it with a perl script.</em>
 * <p>
 * Basic calling conventions:  Since SPICE is replete with functions that alter
 * storage pointed at by calling arguments, some weirdness has to be put up with
 * for the time being.  Any argument you expect to get output from needs to
 * be passed in with enough values to reserve space for the return data.
 * This is because there was no way to programmatically determine how much
 * space was needed in the short time allotted for this project. I hope to
 * fix this ugliness someday. For more ugliness, multidimensional arrays
 * are treated as single dimensional arrays.  You pass in the array in last
 * index changing order.
 * <p>
 * Example:  A SPICE function returns a 3x3 matrix in an argument. Therefore,
 * when you invoke the Java method, you must pass in an array of cardinality
 * 9.  The values are unimportant unless the argument is both input and output.
 * However, types must always match (double to double). When returned in the list
 * the matrix will be returned as an array of cardinality 9. The correspondence
 * then is: [0] = [0][0], [1] = [0][1], [2] = [0][2], [3] = [1][0], etc. up to
 * [8] = [2][2].  It's ugly I know, but the best that could be done on short
 * notice.
 * <p>
 * Note also that some values are defined as arrays, but when you look at the
 * SPICE docs, they are in fact single values.  Again, telling whether a
 * pointer refers to a single value or some kind of array is a challenge.
 * Hey, cut me some slack.  This is the first time I've ever done anything
 * with Java beyond 'Hello, World'.
 */

package edu.asu.jspice;

public class JSpice {
	static {
		System.loadLibrary("cspice_jni");
    }


// Input arguments for spksfs:
//   int[] body  
//   double[] et  
//   int[] handle  
//   double[] descr  
//   String ident  
//   boolean[] found  
//   int ident_len  
//     an int object for the SPICE function return value;
    public static native synchronized int spksfs( int body[],double et[],int handle[],double descr[],StringBuffer ident,boolean found[],int ident_len );



// Input arguments for spkpvn:
//   int[] handle  
//   double[] descr  
//   double[] et  
//   int[] ref  
//   double[] state  
//   int[] center  
//     an int object for the SPICE function return value;
    public static native synchronized int spkpvn( int handle[],double descr[],double et[],int ref[],double state[],int center[] );



// Input arguments for spkpv:
//   int[] handle  
//   double[] descr  
//   double[] et  
//   String ref  
//   double[] state  
//   int[] center  
//   int ref_len  
//     an int object for the SPICE function return value;
    public static native synchronized int spkpv( int handle[],double descr[],double et[],StringBuffer ref,double state[],int center[],int ref_len );



// Input arguments for frmchg:
//   int[] frame1  
//   int[] frame2  
//   double[] et  
//   double[] xform  
//     an int object for the SPICE function return value;
    public static native synchronized int frmchg( int frame1[],int frame2[],double et[],double xform[] );



// Input arguments for ckupfc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void ckupfc( int handle );



// Input arguments for dafrdac:
//   int handle  
//   int begin  
//   int end  
//   double[] data  
// Returns: Nothing.
    public static native synchronized void dafrdac( int handle,int begin,int end,double data[] );



// Note: The appndcc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for appndcc:
//   String item  
//   int cell  
    public static native synchronized void appndcc( StringBuffer item,int cell );



// Note: The appnddc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for appnddc:
//   double item  
//   int cell  
    public static native synchronized void appnddc( double item,int cell );



// Note: The appndic function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for appndic:
//   int item  
//   int cell  
    public static native synchronized void appndic( int item,int cell );



// Input arguments for axisarc:
//   double[] axis  (Array defined: [3])
//   double angle  
//   double[] r  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void axisarc( double axis[],double angle,double r[] );



// Input arguments for b1900c:
// Returns:  An double
    public static native synchronized double b1900c( );



// Input arguments for b1950c:
// Returns:  An double
    public static native synchronized double b1950c( );



// Input arguments for badkpvc:
//   String caller  
//   String name  
//   String comp  
//   int size  
//   int divby  
//   char type  
//     a boolean object for the SPICE function return value;
//     a String object for the caller argument;
//     a String object for the name argument;
//     a String object for the comp argument;
    public static native synchronized boolean badkpvc( StringBuffer caller,StringBuffer name,StringBuffer comp,int size,int divby,char type );



// Input arguments for bodc2nc:
//   int code  
//   int lenout  
//   String name  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void bodc2nc( int code,int lenout,StringBuffer name,boolean found[] );



// Input arguments for boddefc:
//   String name  
//   int code  
//     a String object for the name argument;
    public static native synchronized void boddefc( StringBuffer name,int code );



// Input arguments for bodfndc:
//   int body  
//   String item  
//     a boolean object for the SPICE function return value;
//     a String object for the item argument;
    public static native synchronized boolean bodfndc( int body,StringBuffer item );



// Input arguments for bodn2cc:
//   String name  
//   int[] code  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void bodn2cc( StringBuffer name,int code[],boolean found[] );



// Input arguments for bodvarc:
//   int body  
//   String item  
//   int[] dim  
//   double[] values  
//     a String object for the item argument;
    public static native synchronized void bodvarc( int body,StringBuffer item,int dim[],double values[] );



// Input arguments for brcktdc:
//   double number  
//   double end1  
//   double end2  
// Returns:  An double
    public static native synchronized double brcktdc( double number,double end1,double end2 );



// Input arguments for brcktic:
//   int number  
//   int end1  
//   int end2  
// Returns:  An int
    public static native synchronized int brcktic( int number,int end1,int end2 );



// Input arguments for bschocc:
//   String value  
//   int ndim  
//   int lenvals  
//   String array  
//   int[] order  
//     an int object for the SPICE function return value;
//     a String object for the value argument;
//     a String object for the array argument;
    public static native synchronized int bschocc( StringBuffer value,int ndim,int lenvals,StringBuffer array,int order[] );



// Input arguments for bschoic:
//   int value  
//   int ndim  
//   int[] array  
//   int[] order  
//     an int object for the SPICE function return value;
    public static native synchronized int bschoic( int value,int ndim,int array[],int order[] );



// Input arguments for bsrchcc:
//   String value  
//   int ndim  
//   int lenvals  
//   String array  
//     an int object for the SPICE function return value;
//     a String object for the value argument;
//     a String object for the array argument;
    public static native synchronized int bsrchcc( StringBuffer value,int ndim,int lenvals,StringBuffer array );



// Input arguments for bsrchdc:
//   double value  
//   int ndim  
//   double[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int bsrchdc( double value,int ndim,double array[] );



// Input arguments for bsrchic:
//   int value  
//   int ndim  
//   int[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int bsrchic( int value,int ndim,int array[] );



// Note: The cardc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for cardc:
//   int cell  
    public static native synchronized int cardc( int cell );



// Input arguments for cgv2el:
//   double[] center  
//   double[] vec1  
//   double[] vec2  
//   double[] ellips  
//     an int object for the SPICE function return value;
    public static native synchronized int cgv2el( double center[],double vec1[],double vec2[],double ellips[] );



// Input arguments for chkinc:
//   String module  
//     a String object for the module argument;
    public static native synchronized void chkinc( StringBuffer module );



// Input arguments for chkoutc:
//   String module  
//     a String object for the module argument;
    public static native synchronized void chkoutc( StringBuffer module );



// Input arguments for cidfrmc:
//   int cent  
//   int lenout  
//   int[] frcode  
//   String frname  
//   boolean[] found  
    public static native synchronized void cidfrmc( int cent,int lenout,int frcode[],StringBuffer frname,boolean found[] );



// Input arguments for ckclsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void ckclsc( int handle );



// Input arguments for ckgpc:
//   int inst  
//   double sclkdp  
//   double tol  
//   String ref  
//   double[] cmat  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] clkout  
//   boolean[] found  
//     a String object for the ref argument;
    public static native synchronized void ckgpc( int inst,double sclkdp,double tol,StringBuffer ref,double cmat[],double clkout[],boolean found[] );



// Input arguments for ckgpavc:
//   int inst  
//   double sclkdp  
//   double tol  
//   String ref  
//   double[] cmat  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] av  (Array defined: [3])
//   double[] clkout  
//   boolean[] found  
//     a String object for the ref argument;
    public static native synchronized void ckgpavc( int inst,double sclkdp,double tol,StringBuffer ref,double cmat[],double av[],double clkout[],boolean found[] );



// Input arguments for cklpfc:
//   String filename  
//   int[] handle  
//     a String object for the filename argument;
    public static native synchronized void cklpfc( StringBuffer filename,int handle[] );



// Input arguments for ckopnc:
//   String fname  
//   String ifname  
//   int ncomch  
//   int[] handle  
//     a String object for the fname argument;
//     a String object for the ifname argument;
    public static native synchronized void ckopnc( StringBuffer fname,StringBuffer ifname,int ncomch,int handle[] );



// Input arguments for ckw01c:
//   int handle  
//   double begtim  
//   double endtim  
//   int inst  
//   String ref  
//   boolean avflag  
//   String segid  
//   int nrec  
//   double[] sclkdp  (Array defined: [])
//   double[] quats  (Array defined: [][4] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] avvs  (Array defined: [][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a String object for the ref argument;
//     a String object for the segid argument;
    public static native synchronized void ckw01c( int handle,double begtim,double endtim,int inst,StringBuffer ref,boolean avflag,StringBuffer segid,int nrec,double sclkdp[],double quats[],double avvs[] );



// Input arguments for ckw02c:
//   int handle  
//   double begtim  
//   double endtim  
//   int inst  
//   String ref  
//   String segid  
//   int nrec  
//   double[] start  (Array defined: [])
//   double[] stop  (Array defined: [])
//   double[] quats  (Array defined: [][4] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] avvs  (Array defined: [][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] rates  (Array defined: [])
//     a String object for the ref argument;
//     a String object for the segid argument;
    public static native synchronized void ckw02c( int handle,double begtim,double endtim,int inst,StringBuffer ref,StringBuffer segid,int nrec,double start[],double stop[],double quats[],double avvs[],double rates[] );



// Input arguments for ckw03c:
//   int handle  
//   double begtim  
//   double endtim  
//   int inst  
//   String ref  
//   boolean avflag  
//   String segid  
//   int nrec  
//   double[] sclkdp  (Array defined: [])
//   double[] quats  (Array defined: [][4] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] avvs  (Array defined: [][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   int nints  
//   double[] starts  (Array defined: [])
//     a String object for the ref argument;
//     a String object for the segid argument;
    public static native synchronized void ckw03c( int handle,double begtim,double endtim,int inst,StringBuffer ref,boolean avflag,StringBuffer segid,int nrec,double sclkdp[],double quats[],double avvs[],int nints,double starts[] );



// Input arguments for ckw05c:
//   int handle  
//   int subtyp  
//   int degree  
//   double begtim  
//   double endtim  
//   int inst  
//   String ref  
//   boolean avflag  
//   String segid  
//   int n  
//   double[] sclkdp  (Array defined: [])
//   String packts  
//   double rate  
//   int nints  
//   double[] starts  (Array defined: [])
//     a String object for the ref argument;
//     a String object for the segid argument;
    public static native synchronized void ckw05c( int handle,int subtyp,int degree,double begtim,double endtim,int inst,StringBuffer ref,boolean avflag,StringBuffer segid,int n,double sclkdp[],StringBuffer packts,double rate,int nints,double starts[] );



// Input arguments for clightc:
// Returns:  An double
    public static native synchronized double clightc( );



// Input arguments for clpoolc:
// Returns:  Nothing.
    public static native synchronized void clpoolc( );



// Input arguments for cmprssc:
//   char delim  
//   int n  
//   String input  
//   int lenout  
//   String output  
//     a String object for the input argument;
//     a String object for the output argument;
    public static native synchronized void cmprssc( char delim,int n,StringBuffer input,int lenout,StringBuffer output );



// Input arguments for cnmfrmc:
//   String cname  
//   int lenout  
//   int[] frcode  
//   String frname  
//   boolean[] found  
//     a String object for the cname argument;
    public static native synchronized void cnmfrmc( StringBuffer cname,int lenout,int frcode[],StringBuffer frname,boolean found[] );



// Input arguments for conicsc:
//   double[] elts  (Array defined: [8])
//   double et  
//   double[] state  (Array defined: [6])
// Returns: Nothing.
    public static native synchronized void conicsc( double elts[],double et,double state[] );



// Input arguments for convrtc:
//   double x  
//   String in  
//   String out  
//   double[] y  
//     a String object for the in argument;
//     a String object for the out argument;
    public static native synchronized void convrtc( double x,StringBuffer in,StringBuffer out,double y[] );



// Note: The copyc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for copyc:
//   int cell  
//   int copy  
    public static native synchronized void copyc( int cell,int copy );



// Input arguments for cposc:
//   String str  
//   String chars  
//   int start  
//     an int object for the SPICE function return value;
//     a String object for the str argument;
//     a String object for the chars argument;
    public static native synchronized int cposc( StringBuffer str,StringBuffer chars,int start );



// Input arguments for cposrc:
//   String str  
//   String chars  
//   int start  
//     an int object for the SPICE function return value;
//     a String object for the str argument;
//     a String object for the chars argument;
    public static native synchronized int cposrc( StringBuffer str,StringBuffer chars,int start );



// Input arguments for cvpoolc:
//   String agent  
//   boolean[] update  
//     a String object for the agent argument;
    public static native synchronized void cvpoolc( StringBuffer agent,boolean update[] );



// Input arguments for cyllatc:
//   double r  
//   double lonc  
//   double z  
//   double[] radius  
//   double[] lon  
//   double[] lat  
// Returns: Nothing.
    public static native synchronized void cyllatc( double r,double lonc,double z,double radius[],double lon[],double lat[] );



// Input arguments for cylrecc:
//   double r  
//   double lon  
//   double z  
//   double[] rectan  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void cylrecc( double r,double lon,double z,double rectan[] );



// Input arguments for cylsphc:
//   double r  
//   double lonc  
//   double z  
//   double[] radius  
//   double[] colat  
//   double[] lon  
// Returns: Nothing.
    public static native synchronized void cylsphc( double r,double lonc,double z,double radius[],double colat[],double lon[] );



// Input arguments for dafbbsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void dafbbsc( int handle );



// Input arguments for dafbfsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void dafbfsc( int handle );



// Input arguments for dafclsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void dafclsc( int handle );



// Input arguments for dafcsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void dafcsc( int handle );



// Input arguments for daffnac:
//   boolean[] found  
// Returns: Nothing.
    public static native synchronized void daffnac( boolean found[] );



// Input arguments for daffpac:
//   boolean[] found  
// Returns: Nothing.
    public static native synchronized void daffpac( boolean found[] );



// Input arguments for dafgnc:
//   int lenout  
//   String name  
//     a String object for the name argument;
    public static native synchronized void dafgnc( int lenout,StringBuffer name );



// Input arguments for dafgsc:
//   double[] sum  (Array defined: [])
// Returns: Nothing.
    public static native synchronized void dafgsc( double sum[] );



// Input arguments for dafoprc:
//   String fname  
//   int[] handle  
//     a String object for the fname argument;
    public static native synchronized void dafoprc( StringBuffer fname,int handle[] );



// Input arguments for dafusc:
//   double[] sum  (Array defined: [])
//   int nd  
//   int ni  
//   double[] dc  (Array defined: [])
//   int[] ic  (Array defined: [])
// Returns: Nothing.
    public static native synchronized void dafusc( double sum[],int nd,int ni,double dc[],int ic[] );



// Input arguments for dasacc:
//   int handle  
//   int n  
//   int buflen  
//   String buffer  
//     a String object for the buffer argument;
    public static native synchronized void dasacc( int handle,int n,int buflen,StringBuffer buffer );



// Input arguments for dasecc:
//   int handle  
//   int bufsiz  
//   int buflen  
//   int[] n  
//   String buffer  
//   boolean[] done  
    public static native synchronized void dasecc( int handle,int bufsiz,int buflen,int n[],StringBuffer buffer,boolean done[] );



// Input arguments for dcyldrc:
//   double x  
//   double y  
//   double z  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void dcyldrc( double x,double y,double z,double jacobi[] );



// Input arguments for detc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a double object for the SPICE function return value;
    public static native synchronized double detc( double m1[] );



// Input arguments for dgeodrc:
//   double x  
//   double y  
//   double z  
//   double re  
//   double f  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void dgeodrc( double x,double y,double z,double re,double f,double jacobi[] );



// Input arguments for diags2c:
//   double[] symmat  (Array defined: [2][2] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] diag  (Array defined: [2][2] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] rotate  (Array defined: [2][2] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void diags2c( double symmat[],double diag[],double rotate[] );



// Note: The diffc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for diffc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void diffc( int a,int b,int c );



// Input arguments for dlatdrc:
//   double x  
//   double y  
//   double z  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void dlatdrc( double x,double y,double z,double jacobi[] );



// Input arguments for dpmaxc:
// Returns:  An double
    public static native synchronized double dpmaxc( );



// Input arguments for dpminc:
// Returns:  An double
    public static native synchronized double dpminc( );



// Input arguments for dprc:
// Returns:  An double
    public static native synchronized double dprc( );



// Input arguments for drdcylc:
//   double r  
//   double lon  
//   double z  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void drdcylc( double r,double lon,double z,double jacobi[] );



// Input arguments for drdgeoc:
//   double lon  
//   double lat  
//   double alt  
//   double re  
//   double f  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void drdgeoc( double lon,double lat,double alt,double re,double f,double jacobi[] );



// Input arguments for drdlatc:
//   double r  
//   double lon  
//   double lat  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void drdlatc( double r,double lon,double lat,double jacobi[] );



// Input arguments for drdsphc:
//   double r  
//   double colat  
//   double lon  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void drdsphc( double r,double colat,double lon,double jacobi[] );



// Input arguments for dsphdrc:
//   double x  
//   double y  
//   double z  
//   double[] jacobi  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void dsphdrc( double x,double y,double z,double jacobi[] );



// Input arguments for dtpoolc:
//   String name  
//   boolean[] found  
//   int[] n  
//   String type  (Array defined: [1])
//     a String object for the name argument;
    public static native synchronized void dtpoolc( StringBuffer name,boolean found[],int n[],StringBuffer type );



// Input arguments for dvdotc:
//   double[] s1  (Array defined: [6])
//   double[] s2  (Array defined: [6])
//     a double object for the SPICE function return value;
    public static native synchronized double dvdotc( double s1[],double s2[] );



// Input arguments for dvhatc:
//   double[] s1  (Array defined: [6])
//   double[] sout  (Array defined: [6])
// Returns: Nothing.
    public static native synchronized void dvhatc( double s1[],double sout[] );



// Input arguments for dvpoolc:
//   String name  
//     a String object for the name argument;
    public static native synchronized void dvpoolc( StringBuffer name );



// Input arguments for edlimb:
//   double[] a  
//   double[] b  
//   double[] c__  
//   double[] viewpt  
//   double[] limb  
//     an int object for the SPICE function return value;
    public static native synchronized int edlimb( double a[],double b[],double c__[],double viewpt[],double limb[] );



// Input arguments for ekacecc:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int nvals  
//   int vallen  
//   String cvals  
//   boolean isnull  
//     a String object for the column argument;
//     a String object for the cvals argument;
    public static native synchronized void ekacecc( int handle,int segno,int recno,StringBuffer column,int nvals,int vallen,StringBuffer cvals,boolean isnull );



// Input arguments for ekacedc:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int nvals  
//   double[] dvals  
//   boolean isnull  
//     a String object for the column argument;
    public static native synchronized void ekacedc( int handle,int segno,int recno,StringBuffer column,int nvals,double dvals[],boolean isnull );



// Input arguments for ekaceic:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int nvals  
//   int[] ivals  
//   boolean isnull  
//     a String object for the column argument;
    public static native synchronized void ekaceic( int handle,int segno,int recno,StringBuffer column,int nvals,int ivals[],boolean isnull );



// Input arguments for ekaclcc:
//   int handle  
//   int segno  
//   String column  
//   int vallen  
//   String cvals  
//   int[] entszs  
//   boolean[] nlflgs  
//   int[] rcptrs  
//   int[] wkindx  
//     a String object for the column argument;
//     a String object for the cvals argument;
    public static native synchronized void ekaclcc( int handle,int segno,StringBuffer column,int vallen,StringBuffer cvals,int entszs[],boolean nlflgs[],int rcptrs[],int wkindx[] );



// Input arguments for ekacldc:
//   int handle  
//   int segno  
//   String column  
//   double[] dvals  
//   int[] entszs  
//   boolean[] nlflgs  
//   int[] rcptrs  
//   int[] wkindx  
//     a String object for the column argument;
    public static native synchronized void ekacldc( int handle,int segno,StringBuffer column,double dvals[],int entszs[],boolean nlflgs[],int rcptrs[],int wkindx[] );



// Input arguments for ekaclic:
//   int handle  
//   int segno  
//   String column  
//   int[] ivals  
//   int[] entszs  
//   boolean[] nlflgs  
//   int[] rcptrs  
//   int[] wkindx  
//     a String object for the column argument;
    public static native synchronized void ekaclic( int handle,int segno,StringBuffer column,int ivals[],int entszs[],boolean nlflgs[],int rcptrs[],int wkindx[] );



// Input arguments for ekapprc:
//   int handle  
//   int segno  
//   int[] recno  
// Returns: Nothing.
    public static native synchronized void ekapprc( int handle,int segno,int recno[] );



// Input arguments for ekbsegc:
//   int handle  
//   String tabnam  
//   int ncols  
//   int cnmlen  
//   String cnames  
//   int declen  
//   String decls  
//   int[] segno  
//     a String object for the tabnam argument;
//     a String object for the cnames argument;
//     a String object for the decls argument;
    public static native synchronized void ekbsegc( int handle,StringBuffer tabnam,int ncols,int cnmlen,StringBuffer cnames,int declen,StringBuffer decls,int segno[] );



// Input arguments for ekccntc:
//   String table  
//   int[] ccount  
//     a String object for the table argument;
    public static native synchronized void ekccntc( StringBuffer table,int ccount[] );



// Note: The ekciic function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceEKAttDsc *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for ekciic:
//   String table  
//   int cindex  
//   int lenout  
//   String column  
//   int attdsc  
    public static native synchronized void ekciic( StringBuffer table,int cindex,int lenout,StringBuffer column,int attdsc );



// Input arguments for ekclsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void ekclsc( int handle );



// Input arguments for ekdelrc:
//   int handle  
//   int segno  
//   int recno  
// Returns:  Nothing.
    public static native synchronized void ekdelrc( int handle,int segno,int recno );



// Input arguments for ekffldc:
//   int handle  
//   int segno  
//   int[] rcptrs  
// Returns: Nothing.
    public static native synchronized void ekffldc( int handle,int segno,int rcptrs[] );



// Input arguments for ekfindc:
//   String query  
//   int lenout  
//   int[] nmrows  
//   boolean[] error  
//   String errmsg  
//     a String object for the query argument;
    public static native synchronized void ekfindc( StringBuffer query,int lenout,int nmrows[],boolean error[],StringBuffer errmsg );



// Input arguments for ekgcc:
//   int selidx  
//   int row  
//   int elment  
//   int lenout  
//   String cdata  
//   boolean[] null_renamed  
//   boolean[] found  
//     a String object for the cdata argument;
    public static native synchronized void ekgcc( int selidx,int row,int elment,int lenout,StringBuffer cdata,boolean null_renamed[],boolean found[] );



// Input arguments for ekgdc:
//   int selidx  
//   int row  
//   int elment  
//   double[] ddata  
//   boolean[] null_renamed  
//   boolean[] found  
// Returns: Nothing.
    public static native synchronized void ekgdc( int selidx,int row,int elment,double ddata[],boolean null_renamed[],boolean found[] );



// Input arguments for ekgic:
//   int selidx  
//   int row  
//   int elment  
//   int[] idata  
//   boolean[] null_renamed  
//   boolean[] found  
// Returns: Nothing.
    public static native synchronized void ekgic( int selidx,int row,int elment,int idata[],boolean null_renamed[],boolean found[] );



// Input arguments for ekifldc:
//   int handle  
//   String tabnam  
//   int ncols  
//   int nrows  
//   int cnmlen  
//   String cnames  
//   int declen  
//   String decls  
//   int[] segno  
//   int[] rcptrs  
//     a String object for the tabnam argument;
//     a String object for the cnames argument;
//     a String object for the decls argument;
    public static native synchronized void ekifldc( int handle,StringBuffer tabnam,int ncols,int nrows,int cnmlen,StringBuffer cnames,int declen,StringBuffer decls,int segno[],int rcptrs[] );



// Input arguments for ekinsrc:
//   int handle  
//   int segno  
//   int recno  
// Returns:  Nothing.
    public static native synchronized void ekinsrc( int handle,int segno,int recno );



// Input arguments for eklefc:
//   String fname  
//   int[] handle  
//     a String object for the fname argument;
    public static native synchronized void eklefc( StringBuffer fname,int handle[] );



// Input arguments for ekneltc:
//   int selidx  
//   int row  
// Returns:  An int
    public static native synchronized int ekneltc( int selidx,int row );



// Input arguments for eknsegc:
//   int handle  
// Returns:  An int
    public static native synchronized int eknsegc( int handle );



// Input arguments for ekntabc:
//   int[] n  
// Returns: Nothing.
    public static native synchronized void ekntabc( int n[] );



// Input arguments for ekopnc:
//   String fname  
//   String ifname  
//   int ncomch  
//   int[] handle  
//     a String object for the fname argument;
//     a String object for the ifname argument;
    public static native synchronized void ekopnc( StringBuffer fname,StringBuffer ifname,int ncomch,int handle[] );



// Input arguments for ekoprc:
//   String fname  
//   int[] handle  
//     a String object for the fname argument;
    public static native synchronized void ekoprc( StringBuffer fname,int handle[] );



// Input arguments for ekopsc:
//   int[] handle  
// Returns: Nothing.
    public static native synchronized void ekopsc( int handle[] );



// Input arguments for ekopwc:
//   String fname  
//   int[] handle  
//     a String object for the fname argument;
    public static native synchronized void ekopwc( StringBuffer fname,int handle[] );



// Note: The ekpselc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceEKExprClass *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for ekpselc:
//   String query  
//   int msglen  
//   int tablen  
//   int collen  
//   int[] n  
//   int[] xbegs  
//   int[] xends  
//   int xtypes  
//   int xclass  
//   String tabs  
//   String cols  
//   boolean[] error  
//   String errmsg  
    public static native synchronized void ekpselc( StringBuffer query,int msglen,int tablen,int collen,int n[],int xbegs[],int xends[],int xtypes,int xclass,StringBuffer tabs,StringBuffer cols,boolean error[],StringBuffer errmsg );



// Input arguments for ekrcecc:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int lenout  
//   int[] nvals  
//   String cvals  
//   boolean[] isnull  
//     a String object for the column argument;
    public static native synchronized void ekrcecc( int handle,int segno,int recno,StringBuffer column,int lenout,int nvals[],StringBuffer cvals,boolean isnull[] );



// Input arguments for ekrcedc:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int[] nvals  
//   double[] dvals  
//   boolean[] isnull  
//     a String object for the column argument;
    public static native synchronized void ekrcedc( int handle,int segno,int recno,StringBuffer column,int nvals[],double dvals[],boolean isnull[] );



// Input arguments for ekrceic:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int[] nvals  
//   int[] ivals  
//   boolean[] isnull  
//     a String object for the column argument;
    public static native synchronized void ekrceic( int handle,int segno,int recno,StringBuffer column,int nvals[],int ivals[],boolean isnull[] );



// Note: The ekssumc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceEKSegSum *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for ekssumc:
//   int handle  
//   int segno  
//   int segsum  
    public static native synchronized void ekssumc( int handle,int segno,int segsum );



// Input arguments for ektnamc:
//   int n  
//   int lenout  
//   String table  
//     a String object for the table argument;
    public static native synchronized void ektnamc( int n,int lenout,StringBuffer table );



// Input arguments for ekucecc:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int nvals  
//   int vallen  
//   String cvals  
//   boolean isnull  
//     a String object for the column argument;
//     a String object for the cvals argument;
    public static native synchronized void ekucecc( int handle,int segno,int recno,StringBuffer column,int nvals,int vallen,StringBuffer cvals,boolean isnull );



// Input arguments for ekucedc:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int nvals  
//   double[] dvals  
//   boolean isnull  
//     a String object for the column argument;
    public static native synchronized void ekucedc( int handle,int segno,int recno,StringBuffer column,int nvals,double dvals[],boolean isnull );



// Input arguments for ekuceic:
//   int handle  
//   int segno  
//   int recno  
//   String column  
//   int nvals  
//   int[] ivals  
//   boolean isnull  
//     a String object for the column argument;
    public static native synchronized void ekuceic( int handle,int segno,int recno,StringBuffer column,int nvals,int ivals[],boolean isnull );



// Input arguments for ekuefc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void ekuefc( int handle );



// Input arguments for el2cgv:
//   double[] ellips  
//   double[] center  
//   double[] smajor  
//   double[] sminor  
//     an int object for the SPICE function return value;
    public static native synchronized int el2cgv( double ellips[],double center[],double smajor[],double sminor[] );



// Note: The elemcc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for elemcc:
//   String item  
//   int set  
    public static native synchronized boolean elemcc( StringBuffer item,int set );



// Note: The elemdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for elemdc:
//   double item  
//   int set  
    public static native synchronized boolean elemdc( double item,int set );



// Note: The elemic function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for elemic:
//   int item  
//   int set  
    public static native synchronized boolean elemic( int item,int set );



// Input arguments for eqstrc:
//   String a  
//   String b  
//     a boolean object for the SPICE function return value;
//     a String object for the a argument;
//     a String object for the b argument;
    public static native synchronized boolean eqstrc( StringBuffer a,StringBuffer b );



// Input arguments for erractc:
//   String op  
//   int lenout  
//   String action  
//     a String object for the op argument;
//     a String object for the action argument;
    public static native synchronized void erractc( StringBuffer op,int lenout,StringBuffer action );



// Input arguments for errchc:
//   String marker  
//   String string  
//     a String object for the marker argument;
//     a String object for the string argument;
    public static native synchronized void errchc( StringBuffer marker,StringBuffer string );



// Input arguments for errdevc:
//   String op  
//   int lenout  
//   String device  
//     a String object for the op argument;
//     a String object for the device argument;
    public static native synchronized void errdevc( StringBuffer op,int lenout,StringBuffer device );



// Input arguments for errdpc:
//   String marker  
//   double number  
//     a String object for the marker argument;
    public static native synchronized void errdpc( StringBuffer marker,double number );



// Input arguments for errintc:
//   String marker  
//   int number  
//     a String object for the marker argument;
    public static native synchronized void errintc( StringBuffer marker,int number );



// Input arguments for errprtc:
//   String op  
//   int lenout  
//   String list  
//     a String object for the op argument;
//     a String object for the list argument;
    public static native synchronized void errprtc( StringBuffer op,int lenout,StringBuffer list );



// Input arguments for esrchcc:
//   String value  
//   int ndim  
//   int lenvals  
//   String array  
//     an int object for the SPICE function return value;
//     a String object for the value argument;
//     a String object for the array argument;
    public static native synchronized int esrchcc( StringBuffer value,int ndim,int lenvals,StringBuffer array );



// Input arguments for et2lstc:
//   double et  
//   int body  
//   double lon  
//   String type  
//   int timlen  
//   int ampmlen  
//   int[] hr  
//   int[] mn  
//   int[] sc  
//   String time  
//   String ampm  
//     a String object for the type argument;
    public static native synchronized void et2lstc( double et,int body,double lon,StringBuffer type,int timlen,int ampmlen,int hr[],int mn[],int sc[],StringBuffer time,StringBuffer ampm );



// Input arguments for et2utcc:
//   double et  
//   String format  
//   int prec  
//   int lenout  
//   String utcstr  
//     a String object for the format argument;
//     a String object for the utcstr argument;
    public static native synchronized void et2utcc( double et,StringBuffer format,int prec,int lenout,StringBuffer utcstr );



// Input arguments for etcalc:
//   double et  
//   int lenout  
//   String string  
//     a String object for the string argument;
    public static native synchronized void etcalc( double et,int lenout,StringBuffer string );



// Input arguments for eul2mc:
//   double angle3  
//   double angle2  
//   double angle1  
//   int axis3  
//   int axis2  
//   int axis1  
//   double[] r  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void eul2mc( double angle3,double angle2,double angle1,int axis3,int axis2,int axis1,double r[] );



// Input arguments for eul2xfc:
//   double[] eulang  (Array defined: [6])
//   int axisa  
//   int axisb  
//   int axisc  
//   double[] xform  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void eul2xfc( double eulang[],int axisa,int axisb,int axisc,double xform[] );



// Input arguments for existsc:
//   String fname  
//     a boolean object for the SPICE function return value;
//     a String object for the fname argument;
    public static native synchronized boolean existsc( StringBuffer fname );



// Input arguments for expoolc:
//   String name  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void expoolc( StringBuffer name,boolean found[] );



// Input arguments for failedc:
// Returns:  An boolean
    public static native synchronized boolean failedc( );



// Input arguments for framec:
//   double[] x  (Array defined: [3])
//   double[] y  (Array defined: [3])
//   double[] z  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void framec( double x[],double y[],double z[] );



// Input arguments for frinfoc:
//   int frcode  
//   int[] cent  
//   int[] frclss  
//   int[] clssid  
//   boolean[] found  
// Returns: Nothing.
    public static native synchronized void frinfoc( int frcode,int cent[],int frclss[],int clssid[],boolean found[] );



// Input arguments for frmnamc:
//   int frcode  
//   int lenout  
//   String frname  
//     a String object for the frname argument;
    public static native synchronized void frmnamc( int frcode,int lenout,StringBuffer frname );



// Input arguments for ftnclsc:
//   int unit  
// Returns:  Nothing.
    public static native synchronized void ftnclsc( int unit );



// Input arguments for furnshc:
//   String file  
//     a String object for the file argument;
    public static native synchronized void furnshc( StringBuffer file );



// Input arguments for gcpoolc:
//   String name  
//   int start  
//   int room  
//   int lenout  
//   int[] n  
//   String cvals  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void gcpoolc( StringBuffer name,int start,int room,int lenout,int n[],StringBuffer cvals,boolean found[] );



// Input arguments for gdpoolc:
//   String name  
//   int start  
//   int room  
//   int[] n  
//   double[] values  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void gdpoolc( StringBuffer name,int start,int room,int n[],double values[],boolean found[] );



// Input arguments for georecc:
//   double lon  
//   double lat  
//   double alt  
//   double re  
//   double f  
//   double[] rectan  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void georecc( double lon,double lat,double alt,double re,double f,double rectan[] );



// Input arguments for getcmlc:
//   int[] argc  
//   String[] argv  
// Returns: Nothing.
    public static native synchronized void getcmlc( int argc[],StringBuffer argv[] );



// Input arguments for getelmc:
//   int frstyr  
//   int lineln  
//   String lines  
//   double[] epoch  
//   double[] elems  
//     a String object for the lines argument;
    public static native synchronized void getelmc( int frstyr,int lineln,StringBuffer lines,double epoch[],double elems[] );



// Input arguments for getfatc:
//   String file  
//   int arclen  
//   int typlen  
//   String arch  
//   String type  
//     a String object for the file argument;
//     a String object for the arch argument;
//     a String object for the type argument;
    public static native synchronized void getfatc( StringBuffer file,int arclen,int typlen,StringBuffer arch,StringBuffer type );



// Input arguments for getfovc:
//   int instid  
//   int room  
//   int shapelen  
//   int framelen  
//   String shape  
//   String frame  
//   double[] bsight  (Array defined: [3])
//   int[] n  
//   double[] bounds  (Array defined: [][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a String object for the shape argument;
//     a String object for the frame argument;
    public static native synchronized void getfovc( int instid,int room,int shapelen,int framelen,StringBuffer shape,StringBuffer frame,double bsight[],int n[],double bounds[] );



// Input arguments for getmsgc:
//   String option  
//   int lenout  
//   String msg  
//     a String object for the option argument;
//     a String object for the msg argument;
    public static native synchronized void getmsgc( StringBuffer option,int lenout,StringBuffer msg );



// Input arguments for gipoolc:
//   String name  
//   int start  
//   int room  
//   int[] n  
//   int[] ivals  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void gipoolc( StringBuffer name,int start,int room,int n[],int ivals[],boolean found[] );



// Input arguments for gnpoolc:
//   String name  
//   int start  
//   int room  
//   int lenout  
//   int[] n  
//   String kvars  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void gnpoolc( StringBuffer name,int start,int room,int lenout,int n[],StringBuffer kvars,boolean found[] );



// Input arguments for halfpic:
// Returns:  An double
    public static native synchronized double halfpic( );



// Input arguments for identc:
//   double[] matrix  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void identc( double matrix[] );



// Input arguments for illumc:
//   String target  
//   double et  
//   String abcorr  
//   String obsrvr  
//   double[] spoint  (Array defined: [3])
//   double[] phase  
//   double[] solar  
//   double[] emissn  
//     a String object for the target argument;
//     a String object for the abcorr argument;
//     a String object for the obsrvr argument;
    public static native synchronized void illumc( StringBuffer target,double et,StringBuffer abcorr,StringBuffer obsrvr,double spoint[],double phase[],double solar[],double emissn[] );



// Input arguments for inedpl:
//   double[] a  
//   double[] b  
//   double[] c__  
//   double[] plane  
//   double[] ellips  
//   boolean[] found  
//     an int object for the SPICE function return value;
    public static native synchronized int inedpl( double a[],double b[],double c__[],double plane[],double ellips[],boolean found[] );



// Input arguments for inelpl:
//   double[] ellips  
//   double[] plane  
//   int[] nxpts  
//   double[] xpt1  
//   double[] xpt2  
//     an int object for the SPICE function return value;
    public static native synchronized int inelpl( double ellips[],double plane[],int nxpts[],double xpt1[],double xpt2[] );



// Input arguments for inrypl:
//   double[] vertex  
//   double[] dir  
//   double[] plane  
//   int[] nxpts  
//   double[] xpt  
//     an int object for the SPICE function return value;
    public static native synchronized int inrypl( double vertex[],double dir[],double plane[],int nxpts[],double xpt[] );



// Note: The insrtcc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for insrtcc:
//   String item  
//   int set  
    public static native synchronized void insrtcc( StringBuffer item,int set );



// Note: The insrtdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for insrtdc:
//   double item  
//   int set  
    public static native synchronized void insrtdc( double item,int set );



// Note: The insrtic function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for insrtic:
//   int item  
//   int set  
    public static native synchronized void insrtic( int item,int set );



// Note: The interc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for interc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void interc( int a,int b,int c );



// Input arguments for intmaxc:
// Returns:  An int
    public static native synchronized int intmaxc( );



// Input arguments for intminc:
// Returns:  An int
    public static native synchronized int intminc( );



// Input arguments for invertc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void invertc( double m1[],double mout[] );



// Input arguments for invortc:
//   double[] m  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mit  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void invortc( double m[],double mit[] );



// Input arguments for isordvc:
//   int[] array  
//   int n  
//     a boolean object for the SPICE function return value;
    public static native synchronized boolean isordvc( int array[],int n );



// Input arguments for isrchcc:
//   String value  
//   int ndim  
//   int lenvals  
//   String array  
//     an int object for the SPICE function return value;
//     a String object for the value argument;
//     a String object for the array argument;
    public static native synchronized int isrchcc( StringBuffer value,int ndim,int lenvals,StringBuffer array );



// Input arguments for isrchdc:
//   double value  
//   int ndim  
//   double[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int isrchdc( double value,int ndim,double array[] );



// Input arguments for isrchic:
//   int value  
//   int ndim  
//   int[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int isrchic( int value,int ndim,int array[] );



// Input arguments for isrotc:
//   double[] m  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double ntol  
//   double dtol  
//     a boolean object for the SPICE function return value;
    public static native synchronized boolean isrotc( double m[],double ntol,double dtol );



// Input arguments for iswhspc:
//   String string  
//     a boolean object for the SPICE function return value;
//     a String object for the string argument;
    public static native synchronized boolean iswhspc( StringBuffer string );



// Input arguments for j1900c:
// Returns:  An double
    public static native synchronized double j1900c( );



// Input arguments for j1950c:
// Returns:  An double
    public static native synchronized double j1950c( );



// Input arguments for j2000c:
// Returns:  An double
    public static native synchronized double j2000c( );



// Input arguments for j2100c:
// Returns:  An double
    public static native synchronized double j2100c( );



// Input arguments for jyearc:
// Returns:  An double
    public static native synchronized double jyearc( );



// Input arguments for kdatac:
//   int which  
//   String kind  
//   int fillen  
//   int typlen  
//   int srclen  
//   String file  
//   String filtyp  
//   String source  
//   int[] handle  
//   boolean[] found  
//     a String object for the kind argument;
//     a String object for the file argument;
//     a String object for the filtyp argument;
//     a String object for the source argument;
    public static native synchronized void kdatac( int which,StringBuffer kind,int fillen,int typlen,int srclen,StringBuffer file,StringBuffer filtyp,StringBuffer source,int handle[],boolean found[] );



// Input arguments for kinfoc:
//   String file  
//   int typlen  
//   int srclen  
//   String filtyp  
//   String source  
//   int[] handle  
//   boolean[] found  
//     a String object for the file argument;
//     a String object for the filtyp argument;
//     a String object for the source argument;
    public static native synchronized void kinfoc( StringBuffer file,int typlen,int srclen,StringBuffer filtyp,StringBuffer source,int handle[],boolean found[] );



// Input arguments for ktotalc:
//   String kind  
//   int[] count  
//     a String object for the kind argument;
    public static native synchronized void ktotalc( StringBuffer kind,int count[] );



// Input arguments for kxtrctc:
//   String keywd  
//   int termlen  
//   String terms  
//   int nterms  
//   int stringlen  
//   int substrlen  
//   String string  
//   boolean[] found  
//   String substr  
//     a String object for the keywd argument;
//     a String object for the terms argument;
//     a String object for the string argument;
    public static native synchronized void kxtrctc( StringBuffer keywd,int termlen,StringBuffer terms,int nterms,int stringlen,int substrlen,StringBuffer string,boolean found[],StringBuffer substr );



// Input arguments for lastnbc:
//   String string  
//     an int object for the SPICE function return value;
//     a String object for the string argument;
    public static native synchronized int lastnbc( StringBuffer string );



// Input arguments for latcylc:
//   double radius  
//   double lon  
//   double lat  
//   double[] r  
//   double[] lonc  
//   double[] z  
// Returns: Nothing.
    public static native synchronized void latcylc( double radius,double lon,double lat,double r[],double lonc[],double z[] );



// Input arguments for latrecc:
//   double radius  
//   double longitude  
//   double latitude  
//   double[] rectan  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void latrecc( double radius,double longitude,double latitude,double rectan[] );



// Input arguments for latsphc:
//   double radius  
//   double lon  
//   double lat  
//   double[] rho  
//   double[] colat  
//   double[] lons  
// Returns: Nothing.
    public static native synchronized void latsphc( double radius,double lon,double lat,double rho[],double colat[],double lons[] );



// Input arguments for lcasec:
//   String in  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the out argument;
    public static native synchronized void lcasec( StringBuffer in,int lenout,StringBuffer out );



// Input arguments for ldpoolc:
//   String filename  
//     a String object for the filename argument;
    public static native synchronized void ldpoolc( StringBuffer filename );



// Input arguments for lmpoolc:
//   String cvals  
//   int lenvals  
//   int n  
//     a String object for the cvals argument;
    public static native synchronized void lmpoolc( StringBuffer cvals,int lenvals,int n );



// Input arguments for lparsec:
//   String list  
//   String delim  
//   int nmax  
//   int lenout  
//   int[] n  
//   String items  
//     a String object for the list argument;
//     a String object for the delim argument;
    public static native synchronized void lparsec( StringBuffer list,StringBuffer delim,int nmax,int lenout,int n[],StringBuffer items );



// Input arguments for lparsmc:
//   String list  
//   String delims  
//   int nmax  
//   int lenout  
//   int[] n  
//   String items  
//     a String object for the list argument;
//     a String object for the delims argument;
    public static native synchronized void lparsmc( StringBuffer list,StringBuffer delims,int nmax,int lenout,int n[],StringBuffer items );



// Note: The lparssc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for lparssc:
//   String list  
//   String delims  
//   int set  
    public static native synchronized void lparssc( StringBuffer list,StringBuffer delims,int set );



// Input arguments for lstlecc:
//   String string  
//   int n  
//   int lenvals  
//   String array  
//     an int object for the SPICE function return value;
//     a String object for the string argument;
//     a String object for the array argument;
    public static native synchronized int lstlecc( StringBuffer string,int n,int lenvals,StringBuffer array );



// Input arguments for lstledc:
//   double x  
//   int n  
//   double[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int lstledc( double x,int n,double array[] );



// Input arguments for lstleic:
//   int x  
//   int n  
//   int[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int lstleic( int x,int n,int array[] );



// Input arguments for lstltcc:
//   String string  
//   int n  
//   int lenvals  
//   String array  
//     an int object for the SPICE function return value;
//     a String object for the string argument;
//     a String object for the array argument;
    public static native synchronized int lstltcc( StringBuffer string,int n,int lenvals,StringBuffer array );



// Input arguments for lstltdc:
//   double x  
//   int n  
//   double[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int lstltdc( double x,int n,double array[] );



// Input arguments for lstltic:
//   int x  
//   int n  
//   int[] array  
//     an int object for the SPICE function return value;
    public static native synchronized int lstltic( int x,int n,int array[] );



// Input arguments for ltimec:
//   double etobs  
//   int obs  
//   String dir  
//   int targ  
//   double[] ettarg  
//   double[] elapsd  
//     a String object for the dir argument;
    public static native synchronized void ltimec( double etobs,int obs,StringBuffer dir,int targ,double ettarg[],double elapsd[] );



// Input arguments for lx4decc:
//   String string  
//   int first  
//   int[] last  
//   int[] nchar  
//     a String object for the string argument;
    public static native synchronized void lx4decc( StringBuffer string,int first,int last[],int nchar[] );



// Input arguments for lx4numc:
//   String string  
//   int first  
//   int[] last  
//   int[] nchar  
//     a String object for the string argument;
    public static native synchronized void lx4numc( StringBuffer string,int first,int last[],int nchar[] );



// Input arguments for lx4sgnc:
//   String string  
//   int first  
//   int[] last  
//   int[] nchar  
//     a String object for the string argument;
    public static native synchronized void lx4sgnc( StringBuffer string,int first,int last[],int nchar[] );



// Input arguments for lx4unsc:
//   String string  
//   int first  
//   int[] last  
//   int[] nchar  
//     a String object for the string argument;
    public static native synchronized void lx4unsc( StringBuffer string,int first,int last[],int nchar[] );



// Input arguments for lxqstrc:
//   String string  
//   char qchar  
//   int first  
//   int[] last  
//   int[] nchar  
//     a String object for the string argument;
    public static native synchronized void lxqstrc( StringBuffer string,char qchar,int first,int last[],int nchar[] );



// Input arguments for m2eulc:
//   double[] r  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   int axis3  
//   int axis2  
//   int axis1  
//   double[] angle3  
//   double[] angle2  
//   double[] angle1  
// Returns: Nothing.
    public static native synchronized void m2eulc( double r[],int axis3,int axis2,int axis1,double angle3[],double angle2[],double angle1[] );



// Input arguments for m2qc:
//   double[] r  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] q  (Array defined: [4])
// Returns: Nothing.
    public static native synchronized void m2qc( double r[],double q[] );



// Input arguments for matchic:
//   String string  
//   String templ  
//   char wstr  
//   char wchr  
//     a boolean object for the SPICE function return value;
//     a String object for the string argument;
//     a String object for the templ argument;
    public static native synchronized boolean matchic( StringBuffer string,StringBuffer templ,char wstr,char wchr );



// Input arguments for matchwc:
//   String string  
//   String templ  
//   char wstr  
//   char wchr  
//     a boolean object for the SPICE function return value;
//     a String object for the string argument;
//     a String object for the templ argument;
    public static native synchronized boolean matchwc( StringBuffer string,StringBuffer templ,char wstr,char wchr );



// Input arguments for mequc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void mequc( double m1[],double mout[] );



// Input arguments for mequgc:
//   String m1  
//   int nr  
//   int nc  
//   String mout  
//     a String object for the m1 argument;
//     a String object for the mout argument;
    public static native synchronized void mequgc( StringBuffer m1,int nr,int nc,StringBuffer mout );



// Input arguments for mtxmc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] m2  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void mtxmc( double m1[],double m2[],double mout[] );



// Input arguments for mtxmgc:
//   String m1  
//   String m2  
//   int ncol1  
//   int nr1r2  
//   int ncol2  
//   String mout  
//     a String object for the m1 argument;
//     a String object for the m2 argument;
//     a String object for the mout argument;
    public static native synchronized void mtxmgc( StringBuffer m1,StringBuffer m2,int ncol1,int nr1r2,int ncol2,StringBuffer mout );



// Input arguments for mtxvc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] vin  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void mtxvc( double m1[],double vin[],double vout[] );



// Input arguments for mtxvgc:
//   String m1  
//   String v2  
//   int ncol1  
//   int nr1r2  
//   String vout  
//     a String object for the m1 argument;
//     a String object for the v2 argument;
//     a String object for the vout argument;
    public static native synchronized void mtxvgc( StringBuffer m1,StringBuffer v2,int ncol1,int nr1r2,StringBuffer vout );



// Input arguments for mxmc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] m2  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void mxmc( double m1[],double m2[],double mout[] );



// Input arguments for mxmgc:
//   String m1  
//   String m2  
//   int nrow1  
//   int ncol1  
//   int ncol2  
//   String mout  
//     a String object for the m1 argument;
//     a String object for the m2 argument;
//     a String object for the mout argument;
    public static native synchronized void mxmgc( StringBuffer m1,StringBuffer m2,int nrow1,int ncol1,int ncol2,StringBuffer mout );



// Input arguments for mxmtc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] m2  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void mxmtc( double m1[],double m2[],double mout[] );



// Input arguments for mxmtgc:
//   String m1  
//   String m2  
//   int nrow1  
//   int nc1c2  
//   int nrow2  
//   String mout  
//     a String object for the m1 argument;
//     a String object for the m2 argument;
//     a String object for the mout argument;
    public static native synchronized void mxmtgc( StringBuffer m1,StringBuffer m2,int nrow1,int nc1c2,int nrow2,StringBuffer mout );



// Input arguments for mxvc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] vin  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void mxvc( double m1[],double vin[],double vout[] );



// Input arguments for mxvgc:
//   String m1  
//   String v2  
//   int nrow1  
//   int nc1r2  
//   String vout  
//     a String object for the m1 argument;
//     a String object for the v2 argument;
//     a String object for the vout argument;
    public static native synchronized void mxvgc( StringBuffer m1,StringBuffer v2,int nrow1,int nc1r2,StringBuffer vout );



// Input arguments for namfrmc:
//   String frname  
//   int[] frcode  
//     a String object for the frname argument;
    public static native synchronized void namfrmc( StringBuffer frname,int frcode[] );



// Input arguments for ncposc:
//   String str  
//   String chars  
//   int start  
//     an int object for the SPICE function return value;
//     a String object for the str argument;
//     a String object for the chars argument;
    public static native synchronized int ncposc( StringBuffer str,StringBuffer chars,int start );



// Input arguments for ncposrc:
//   String str  
//   String chars  
//   int start  
//     an int object for the SPICE function return value;
//     a String object for the str argument;
//     a String object for the chars argument;
    public static native synchronized int ncposrc( StringBuffer str,StringBuffer chars,int start );



// Input arguments for nearptc:
//   double[] positn  (Array defined: [3])
//   double a  
//   double b  
//   double c  
//   double[] npoint  (Array defined: [3])
//   double[] alt  
// Returns: Nothing.
    public static native synchronized void nearptc( double positn[],double a,double b,double c,double npoint[],double alt[] );



// Input arguments for npedlnc:
//   double a  
//   double b  
//   double c  
//   double[] linept  (Array defined: [3])
//   double[] linedr  (Array defined: [3])
//   double[] pnear  (Array defined: [3])
//   double[] dist  
// Returns: Nothing.
    public static native synchronized void npedlnc( double a,double b,double c,double linept[],double linedr[],double pnear[],double dist[] );



// Input arguments for npelpt:
//   double[] point  
//   double[] ellips  
//   double[] pnear  
//   double[] dist  
//     an int object for the SPICE function return value;
    public static native synchronized int npelpt( double point[],double ellips[],double pnear[],double dist[] );



// Input arguments for nplnptc:
//   double[] linpt  (Array defined: [3])
//   double[] lindir  (Array defined: [3])
//   double[] point  (Array defined: [3])
//   double[] pnear  (Array defined: [3])
//   double[] dist  
// Returns: Nothing.
    public static native synchronized void nplnptc( double linpt[],double lindir[],double point[],double pnear[],double dist[] );



// Input arguments for nvc2pl:
//   double[] normal  
//   double[] const__  
//   double[] plane  
//     an int object for the SPICE function return value;
    public static native synchronized int nvc2pl( double normal[],double const__[],double plane[] );



// Input arguments for nvp2pl:
//   double[] normal  
//   double[] point  
//   double[] plane  
//     an int object for the SPICE function return value;
    public static native synchronized int nvp2pl( double normal[],double point[],double plane[] );



// Note: The ordcc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for ordcc:
//   String item  
//   int set  
    public static native synchronized int ordcc( StringBuffer item,int set );



// Note: The orddc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for orddc:
//   double item  
//   int set  
    public static native synchronized int orddc( double item,int set );



// Input arguments for ordercc:
//   int lenvals  
//   String array  
//   int ndim  
//   int[] iorder  
//     a String object for the array argument;
    public static native synchronized void ordercc( int lenvals,StringBuffer array,int ndim,int iorder[] );



// Input arguments for orderdc:
//   double[] array  
//   int ndim  
//   int[] iorder  
// Returns: Nothing.
    public static native synchronized void orderdc( double array[],int ndim,int iorder[] );



// Input arguments for orderic:
//   int[] array  
//   int ndim  
//   int[] iorder  
// Returns: Nothing.
    public static native synchronized void orderic( int array[],int ndim,int iorder[] );



// Note: The ordic function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for ordic:
//   int item  
//   int set  
    public static native synchronized int ordic( int item,int set );



// Input arguments for osceltc:
//   double[] state  (Array defined: [6])
//   double et  
//   double mu  
//   double[] elts  (Array defined: [8])
// Returns: Nothing.
    public static native synchronized void osceltc( double state[],double et,double mu,double elts[] );



// Input arguments for pcklofc:
//   String filename  
//   int[] handle  
//     a String object for the filename argument;
    public static native synchronized void pcklofc( StringBuffer filename,int handle[] );



// Input arguments for pckuofc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void pckuofc( int handle );



// Input arguments for pcpoolc:
//   String name  
//   int n  
//   int lenvals  
//   String cvals  
//     a String object for the name argument;
//     a String object for the cvals argument;
    public static native synchronized void pcpoolc( StringBuffer name,int n,int lenvals,StringBuffer cvals );



// Input arguments for pdpoolc:
//   String name  
//   int n  
//   double[] dvals  
//     a String object for the name argument;
    public static native synchronized void pdpoolc( StringBuffer name,int n,double dvals[] );



// Input arguments for pic:
// Returns:  An double
    public static native synchronized double pic( );



// Input arguments for pipoolc:
//   String name  
//   int n  
//   int[] ivals  
//     a String object for the name argument;
    public static native synchronized void pipoolc( StringBuffer name,int n,int ivals[] );



// Input arguments for pjelpl:
//   double[] elin  
//   double[] plane  
//   double[] elout  
//     an int object for the SPICE function return value;
    public static native synchronized int pjelpl( double elin[],double plane[],double elout[] );



// Input arguments for pl2nvc:
//   double[] plane  
//   double[] normal  
//   double[] const__  
//     an int object for the SPICE function return value;
    public static native synchronized int pl2nvc( double plane[],double normal[],double const__[] );



// Input arguments for pl2nvp:
//   double[] plane  
//   double[] normal  
//   double[] point  
//     an int object for the SPICE function return value;
    public static native synchronized int pl2nvp( double plane[],double normal[],double point[] );



// Input arguments for pl2psv:
//   double[] plane  
//   double[] point  
//   double[] span1  
//   double[] span2  
//     an int object for the SPICE function return value;
    public static native synchronized int pl2psv( double plane[],double point[],double span1[],double span2[] );



// Input arguments for posc:
//   String str  
//   String substr  
//   int start  
//     an int object for the SPICE function return value;
//     a String object for the str argument;
//     a String object for the substr argument;
    public static native synchronized int posc( StringBuffer str,StringBuffer substr,int start );



// Input arguments for posrc:
//   String str  
//   String substr  
//   int start  
//     an int object for the SPICE function return value;
//     a String object for the str argument;
//     a String object for the substr argument;
    public static native synchronized int posrc( StringBuffer str,StringBuffer substr,int start );



// Input arguments for promptc:
//   String prmptStr  
//   int lenout  
//   String buffer  
//     a String object for the SPICE function return value;
//     a String object for the prmptStr argument;
//     a String object for the buffer argument;
    public static native synchronized String promptc( StringBuffer prmptStr,int lenout,StringBuffer buffer );



// Input arguments for prop2bc:
//   double gm  
//   double[] pvinit  (Array defined: [6])
//   double dt  
//   double[] pvprop  (Array defined: [6])
// Returns: Nothing.
    public static native synchronized void prop2bc( double gm,double pvinit[],double dt,double pvprop[] );



// Input arguments for prsdpc:
//   String string  
//   double[] dpval  
//     a String object for the string argument;
    public static native synchronized void prsdpc( StringBuffer string,double dpval[] );



// Input arguments for prsintc:
//   String string  
//   int[] intval  
//     a String object for the string argument;
    public static native synchronized void prsintc( StringBuffer string,int intval[] );



// Input arguments for psv2pl:
//   double[] point  
//   double[] span1  
//   double[] span2  
//   double[] plane  
//     an int object for the SPICE function return value;
    public static native synchronized int psv2pl( double point[],double span1[],double span2[],double plane[] );



// Input arguments for putcmlc:
//   int argc  
//   String[] argv  
// Returns:  Nothing.
    public static native synchronized void putcmlc( int argc,StringBuffer argv[] );



// Input arguments for pxformc:
//   String from  
//   String to  
//   double et  
//   double[] rotate  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a String object for the from argument;
//     a String object for the to argument;
    public static native synchronized void pxformc( StringBuffer from,StringBuffer to,double et,double rotate[] );



// Input arguments for q2mc:
//   double[] q  (Array defined: [4])
//   double[] r  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void q2mc( double q[],double r[] );



// Input arguments for radrecc:
//   double range  
//   double ra  
//   double dec  
//   double[] rectan  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void radrecc( double range,double ra,double dec,double rectan[] );



// Input arguments for rav2xfc:
//   double[] rot  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] av  (Array defined: [3])
//   double[] xform  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void rav2xfc( double rot[],double av[],double xform[] );



// Input arguments for raxisac:
//   double[] matrix  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] axis  (Array defined: [3])
//   double[] angle  
// Returns: Nothing.
    public static native synchronized void raxisac( double matrix[],double axis[],double angle[] );



// Input arguments for rdtextc:
//   String file  
//   int lenout  
//   String line  
//   boolean[] eof  
//     a String object for the file argument;
//     a String object for the line argument;
    public static native synchronized void rdtextc( StringBuffer file,int lenout,StringBuffer line,boolean eof[] );



// Input arguments for reccylc:
//   double[] rectan  (Array defined: [3])
//   double[] r  
//   double[] lon  
//   double[] z  
// Returns: Nothing.
    public static native synchronized void reccylc( double rectan[],double r[],double lon[],double z[] );



// Input arguments for recgeoc:
//   double[] rectan  (Array defined: [3])
//   double re  
//   double f  
//   double[] lon  
//   double[] lat  
//   double[] alt  
// Returns: Nothing.
    public static native synchronized void recgeoc( double rectan[],double re,double f,double lon[],double lat[],double alt[] );



// Input arguments for reclatc:
//   double[] rectan  (Array defined: [3])
//   double[] radius  
//   double[] longitude  
//   double[] latitude  
// Returns: Nothing.
    public static native synchronized void reclatc( double rectan[],double radius[],double longitude[],double latitude[] );



// Input arguments for recradc:
//   double[] rectan  (Array defined: [3])
//   double[] range  
//   double[] ra  
//   double[] dec  
// Returns: Nothing.
    public static native synchronized void recradc( double rectan[],double range[],double ra[],double dec[] );



// Input arguments for recsphc:
//   double[] rectan  (Array defined: [3])
//   double[] r  
//   double[] colat  
//   double[] lon  
// Returns: Nothing.
    public static native synchronized void recsphc( double rectan[],double r[],double colat[],double lon[] );



// Note: The removcc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for removcc:
//   String item  
//   int set  
    public static native synchronized void removcc( StringBuffer item,int set );



// Note: The removdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for removdc:
//   double item  
//   int set  
    public static native synchronized void removdc( double item,int set );



// Note: The removic function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for removic:
//   int item  
//   int set  
    public static native synchronized void removic( int item,int set );



// Input arguments for reordcc:
//   int[] iorder  
//   int ndim  
//   int lenvals  
//   String array  
    public static native synchronized void reordcc( int iorder[],int ndim,int lenvals,StringBuffer array );



// Input arguments for reorddc:
//   int[] iorder  
//   int ndim  
//   double[] array  
// Returns: Nothing.
    public static native synchronized void reorddc( int iorder[],int ndim,double array[] );



// Input arguments for reordic:
//   int[] iorder  
//   int ndim  
//   int[] array  
// Returns: Nothing.
    public static native synchronized void reordic( int iorder[],int ndim,int array[] );



// Input arguments for reordlc:
//   int[] iorder  
//   int ndim  
//   boolean[] array  
// Returns: Nothing.
    public static native synchronized void reordlc( int iorder[],int ndim,boolean array[] );



// Input arguments for repmcc:
//   String in  
//   String marker  
//   String value  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the marker argument;
//     a String object for the value argument;
//     a String object for the out argument;
    public static native synchronized void repmcc( StringBuffer in,StringBuffer marker,StringBuffer value,int lenout,StringBuffer out );



// Input arguments for repmctc:
//   String in  
//   String marker  
//   int value  
//   char repcase  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the marker argument;
//     a String object for the out argument;
    public static native synchronized void repmctc( StringBuffer in,StringBuffer marker,int value,char repcase,int lenout,StringBuffer out );



// Input arguments for repmdc:
//   String in  
//   String marker  
//   double value  
//   int sigdig  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the marker argument;
//     a String object for the out argument;
    public static native synchronized void repmdc( StringBuffer in,StringBuffer marker,double value,int sigdig,int lenout,StringBuffer out );



// Input arguments for repmfc:
//   String in  
//   String marker  
//   double value  
//   int sigdig  
//   char format  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the marker argument;
//     a String object for the out argument;
    public static native synchronized void repmfc( StringBuffer in,StringBuffer marker,double value,int sigdig,char format,int lenout,StringBuffer out );



// Input arguments for repmic:
//   String in  
//   String marker  
//   int value  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the marker argument;
//     a String object for the out argument;
    public static native synchronized void repmic( StringBuffer in,StringBuffer marker,int value,int lenout,StringBuffer out );



// Input arguments for repmotc:
//   String in  
//   String marker  
//   int value  
//   char repcase  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the marker argument;
//     a String object for the out argument;
    public static native synchronized void repmotc( StringBuffer in,StringBuffer marker,int value,char repcase,int lenout,StringBuffer out );



// Input arguments for resetc:
// Returns:  Nothing.
    public static native synchronized void resetc( );



// Input arguments for returnc:
// Returns:  An boolean
    public static native synchronized boolean returnc( );



// Input arguments for rotatec:
//   double angle  
//   int iaxis  
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void rotatec( double angle,int iaxis,double mout[] );



// Input arguments for rotmatc:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double angle  
//   int iaxis  
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void rotmatc( double m1[],double angle,int iaxis,double mout[] );



// Input arguments for rotvecc:
//   double[] v1  (Array defined: [3])
//   double angle  
//   int iaxis  
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void rotvecc( double v1[],double angle,int iaxis,double vout[] );



// Input arguments for rpdc:
// Returns:  An double
    public static native synchronized double rpdc( );



// Input arguments for rquadc:
//   double a  
//   double b  
//   double c  
//   double[] root1  (Array defined: [2])
//   double[] root2  (Array defined: [2])
// Returns: Nothing.
    public static native synchronized void rquadc( double a,double b,double c,double root1[],double root2[] );



// Input arguments for saelgvc:
//   double[] vec1  (Array defined: [3])
//   double[] vec2  (Array defined: [3])
//   double[] smajor  (Array defined: [3])
//   double[] sminor  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void saelgvc( double vec1[],double vec2[],double smajor[],double sminor[] );



// Note: The scardc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for scardc:
//   int card  
//   int cell  
    public static native synchronized void scardc( int card,int cell );



// Input arguments for scdecdc:
//   int sc  
//   double sclkdp  
//   int lenout  
//   String sclkch  
//     a String object for the sclkch argument;
    public static native synchronized void scdecdc( int sc,double sclkdp,int lenout,StringBuffer sclkch );



// Input arguments for sce2cc:
//   int sc  
//   double et  
//   double[] sclkdp  
// Returns: Nothing.
    public static native synchronized void sce2cc( int sc,double et,double sclkdp[] );



// Input arguments for sce2sc:
//   int sc  
//   double et  
//   int lenout  
//   String sclkch  
//     a String object for the sclkch argument;
    public static native synchronized void sce2sc( int sc,double et,int lenout,StringBuffer sclkch );



// Input arguments for sce2tc:
//   int sc  
//   double et  
//   double[] sclkdp  
// Returns: Nothing.
    public static native synchronized void sce2tc( int sc,double et,double sclkdp[] );



// Input arguments for scencdc:
//   int sc  
//   String sclkch  
//   double[] sclkdp  
//     a String object for the sclkch argument;
    public static native synchronized void scencdc( int sc,StringBuffer sclkch,double sclkdp[] );



// Input arguments for scfmtc:
//   int sc  
//   double ticks  
//   int lenout  
//   String clkstr  
//     a String object for the clkstr argument;
    public static native synchronized void scfmtc( int sc,double ticks,int lenout,StringBuffer clkstr );



// Input arguments for scpartc:
//   int sc  
//   int[] nparts  
//   double[] pstart  
//   double[] pstop  
// Returns: Nothing.
    public static native synchronized void scpartc( int sc,int nparts[],double pstart[],double pstop[] );



// Input arguments for scs2ec:
//   int sc  
//   String sclkch  
//   double[] et  
//     a String object for the sclkch argument;
    public static native synchronized void scs2ec( int sc,StringBuffer sclkch,double et[] );



// Input arguments for sct2ec:
//   int sc  
//   double sclkdp  
//   double[] et  
// Returns: Nothing.
    public static native synchronized void sct2ec( int sc,double sclkdp,double et[] );



// Input arguments for sctiksc:
//   int sc  
//   String clkstr  
//   double[] ticks  
//     a String object for the clkstr argument;
    public static native synchronized void sctiksc( int sc,StringBuffer clkstr,double ticks[] );



// Note: The sdiffc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for sdiffc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void sdiffc( int a,int b,int c );



// Note: The setc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for setc:
//   int a  
//   String op  
//   int b  
    public static native synchronized boolean setc( int a,StringBuffer op,int b );



// Input arguments for setmsgc:
//   String message  
//     a String object for the message argument;
    public static native synchronized void setmsgc( StringBuffer message );



// Input arguments for shellcc:
//   int ndim  
//   int lenvals  
//   String array  
//     a String object for the array argument;
    public static native synchronized void shellcc( int ndim,int lenvals,StringBuffer array );



// Input arguments for shelldc:
//   int ndim  
//   double[] array  
// Returns: Nothing.
    public static native synchronized void shelldc( int ndim,double array[] );



// Input arguments for shellic:
//   int ndim  
//   int[] array  
// Returns: Nothing.
    public static native synchronized void shellic( int ndim,int array[] );



// Input arguments for sigerrc:
//   String message  
//     a String object for the message argument;
    public static native synchronized void sigerrc( StringBuffer message );



// Note: The sizec function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for sizec:
//   int cell  
    public static native synchronized int sizec( int cell );



// Input arguments for spdc:
// Returns:  An double
    public static native synchronized double spdc( );



// Input arguments for sphcylc:
//   double radius  
//   double colat  
//   double slon  
//   double[] r  
//   double[] lon  
//   double[] z  
// Returns: Nothing.
    public static native synchronized void sphcylc( double radius,double colat,double slon,double r[],double lon[],double z[] );



// Input arguments for sphlatc:
//   double r  
//   double colat  
//   double lons  
//   double[] radius  
//   double[] lon  
//   double[] lat  
// Returns: Nothing.
    public static native synchronized void sphlatc( double r,double colat,double lons,double radius[],double lon[],double lat[] );



// Input arguments for sphrecc:
//   double r  
//   double colat  
//   double lon  
//   double[] rectan  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void sphrecc( double r,double colat,double lon,double rectan[] );



// Input arguments for spk14ac:
//   int handle  
//   int ncsets  
//   double[] coeffs  (Array defined: [])
//   double[] epochs  (Array defined: [])
// Returns: Nothing.
    public static native synchronized void spk14ac( int handle,int ncsets,double coeffs[],double epochs[] );



// Input arguments for spk14bc:
//   int handle  
//   String segid  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   int chbdeg  
//     a String object for the segid argument;
//     a String object for the frame argument;
    public static native synchronized void spk14bc( int handle,StringBuffer segid,int body,int center,StringBuffer frame,double first,double last,int chbdeg );



// Input arguments for spk14ec:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void spk14ec( int handle );



// Input arguments for spkapoc:
//   int targ  
//   double et  
//   String ref  
//   double[] sobs  (Array defined: [6])
//   String abcorr  
//   double[] ptarg  (Array defined: [3])
//   double[] lt  
//     a String object for the ref argument;
    public static native synchronized void spkapoc( int targ,double et,StringBuffer ref,double sobs[],StringBuffer abcorr,double ptarg[],double lt[] );



// Input arguments for spkappc:
//   int targ  
//   double et  
//   String ref  
//   double[] sobs  (Array defined: [6])
//   String abcorr  
//   double[] starg  (Array defined: [6])
//   double[] lt  
//     a String object for the ref argument;
    public static native synchronized void spkappc( int targ,double et,StringBuffer ref,double sobs[],StringBuffer abcorr,double starg[],double lt[] );



// Input arguments for spkclsc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void spkclsc( int handle );



// Input arguments for spkezc:
//   int targ  
//   double et  
//   String ref  
//   String abcorr  
//   int obs  
//   double[] starg  (Array defined: [6])
//   double[] lt  
//     a String object for the ref argument;
//     a String object for the abcorr argument;
    public static native synchronized void spkezc( int targ,double et,StringBuffer ref,StringBuffer abcorr,int obs,double starg[],double lt[] );



// Input arguments for spkezpc:
//   int targ  
//   double et  
//   String ref  
//   String abcorr  
//   int obs  
//   double[] ptarg  (Array defined: [3])
//   double[] lt  
//     a String object for the ref argument;
//     a String object for the abcorr argument;
    public static native synchronized void spkezpc( int targ,double et,StringBuffer ref,StringBuffer abcorr,int obs,double ptarg[],double lt[] );



// Input arguments for spkezrc:
//   String targ  
//   double et  
//   String ref  
//   String abcorr  
//   String obs  
//   double[] starg  (Array defined: [6])
//   double[] lt  
//     a String object for the targ argument;
//     a String object for the ref argument;
//     a String object for the abcorr argument;
//     a String object for the obs argument;
    public static native synchronized void spkezrc( StringBuffer targ,double et,StringBuffer ref,StringBuffer abcorr,StringBuffer obs,double starg[],double lt[] );



// Input arguments for spkgeoc:
//   int targ  
//   double et  
//   String ref  
//   int obs  
//   double[] state  (Array defined: [6])
//   double[] lt  
//     a String object for the ref argument;
    public static native synchronized void spkgeoc( int targ,double et,StringBuffer ref,int obs,double state[],double lt[] );



// Input arguments for spkgpsc:
//   int targ  
//   double et  
//   String ref  
//   int obs  
//   double[] pos  (Array defined: [3])
//   double[] lt  
//     a String object for the ref argument;
    public static native synchronized void spkgpsc( int targ,double et,StringBuffer ref,int obs,double pos[],double lt[] );



// Input arguments for spklefc:
//   String filename  
//   int[] handle  
//     a String object for the filename argument;
    public static native synchronized void spklefc( StringBuffer filename,int handle[] );



// Input arguments for spkopac:
//   String file  
//   int[] handle  
//     a String object for the file argument;
    public static native synchronized void spkopac( StringBuffer file,int handle[] );



// Input arguments for spkopnc:
//   String name  
//   String ifname  
//   int ncomch  
//   int[] handle  
//     a String object for the name argument;
//     a String object for the ifname argument;
    public static native synchronized void spkopnc( StringBuffer name,StringBuffer ifname,int ncomch,int handle[] );



// Input arguments for spkpdsc:
//   int body  
//   int center  
//   String frame  
//   int type  
//   double first  
//   double last  
//   double[] descr  (Array defined: [5])
//     a String object for the frame argument;
    public static native synchronized void spkpdsc( int body,int center,StringBuffer frame,int type,double first,double last,double descr[] );



// Input arguments for spkposc:
//   String targ  
//   double et  
//   String ref  
//   String abcorr  
//   String obs  
//   double[] ptarg  (Array defined: [3])
//   double[] lt  
//     a String object for the targ argument;
//     a String object for the ref argument;
//     a String object for the abcorr argument;
//     a String object for the obs argument;
    public static native synchronized void spkposc( StringBuffer targ,double et,StringBuffer ref,StringBuffer abcorr,StringBuffer obs,double ptarg[],double lt[] );



// Input arguments for spkssbc:
//   int targ  
//   double et  
//   String ref  
//   double[] starg  (Array defined: [6])
//     a String object for the ref argument;
    public static native synchronized void spkssbc( int targ,double et,StringBuffer ref,double starg[] );



// Input arguments for spksubc:
//   int handle  
//   double[] descr  (Array defined: [5])
//   String ident  
//   double begin  
//   double end  
//   int newh  
    public static native synchronized void spksubc( int handle,double descr[],StringBuffer ident,double begin,double end,int newh );



// Input arguments for spkudsc:
//   double[] descr  (Array defined: [5])
//   int[] body  
//   int[] center  
//   int[] frame  
//   int[] type  
//   double[] first  
//   double[] last  
//   int[] begin  
//   int[] end  
// Returns: Nothing.
    public static native synchronized void spkudsc( double descr[],int body[],int center[],int frame[],int type[],double first[],double last[],int begin[],int end[] );



// Input arguments for spkuefc:
//   int handle  
// Returns:  Nothing.
    public static native synchronized void spkuefc( int handle );



// Input arguments for spkw02c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   double intlen  
//   int n  
//   int polydg  
//   double[] cdata  (Array defined: [])
//   double btime  
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw02c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,double intlen,int n,int polydg,double cdata[],double btime );



// Input arguments for spkw03c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   double intlen  
//   int n  
//   int polydg  
//   double[] cdata  (Array defined: [])
//   double btime  
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw03c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,double intlen,int n,int polydg,double cdata[],double btime );



// Input arguments for spkw05c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   double gm  
//   int n  
//   double[] states  (Array defined: [][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] epochs  (Array defined: [])
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw05c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,double gm,int n,double states[],double epochs[] );



// Input arguments for spkw08c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   int degree  
//   int n  
//   double[] states  (Array defined: [][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double epoch1  
//   double step  
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw08c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,int degree,int n,double states[],double epoch1,double step );



// Input arguments for spkw09c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   int degree  
//   int n  
//   double[] states  (Array defined: [][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] epochs  (Array defined: [])
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw09c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,int degree,int n,double states[],double epochs[] );



// Input arguments for spkw10c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   double[] consts  (Array defined: [8])
//   int n  
//   double[] elems  (Array defined: [])
//   double[] epochs  (Array defined: [])
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw10c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,double consts[],int n,double elems[],double epochs[] );



// Input arguments for spkw12c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   int degree  
//   int n  
//   double[] states  (Array defined: [][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double epoch0  
//   double step  
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw12c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,int degree,int n,double states[],double epoch0,double step );



// Input arguments for spkw13c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   int degree  
//   int n  
//   double[] states  (Array defined: [][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] epochs  (Array defined: [])
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw13c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,int degree,int n,double states[],double epochs[] );



// Input arguments for spkw15c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   double epoch  
//   double[] tp  (Array defined: [3])
//   double[] pa  (Array defined: [3])
//   double p  
//   double ecc  
//   double j2flg  
//   double[] pv  (Array defined: [3])
//   double gm  
//   double j2  
//   double radius  
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw15c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,double epoch,double tp[],double pa[],double p,double ecc,double j2flg,double pv[],double gm,double j2,double radius );



// Input arguments for spkw17c:
//   int handle  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   double epoch  
//   double[] eqel  (Array defined: [9])
//   double rapol  
//   double decpol  
//     a String object for the frame argument;
//     a String object for the segid argument;
    public static native synchronized void spkw17c( int handle,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,double epoch,double eqel[],double rapol,double decpol );



// Input arguments for spkw18c:
//   int handle  
//   int subtyp  
//   int body  
//   int center  
//   String frame  
//   double first  
//   double last  
//   String segid  
//   int degree  
//   int n  
//   String packts  
//   double[] epochs  (Array defined: [])
//     a String object for the frame argument;
//     a String object for the segid argument;
//     a String object for the packts argument;
    public static native synchronized void spkw18c( int handle,int subtyp,int body,int center,StringBuffer frame,double first,double last,StringBuffer segid,int degree,int n,StringBuffer packts,double epochs[] );



// Note: The ssizec function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for ssizec:
//   int size  
//   int cell  
    public static native synchronized void ssizec( int size,int cell );



// Input arguments for stelabc:
//   double[] pobj  (Array defined: [3])
//   double[] vobs  (Array defined: [3])
//   double[] appobj  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void stelabc( double pobj[],double vobs[],double appobj[] );



// Input arguments for stpoolc:
//   String item  
//   int nth  
//   String contin  
//   int lenout  
//   String string  
//   int[] size  
//   boolean[] found  
//     a String object for the item argument;
//     a String object for the contin argument;
//     a String object for the string argument;
    public static native synchronized void stpoolc( StringBuffer item,int nth,StringBuffer contin,int lenout,StringBuffer string,int size[],boolean found[] );



// Input arguments for str2etc:
//   String str  
//   double[] et  
//     a String object for the str argument;
    public static native synchronized void str2etc( StringBuffer str,double et[] );



// Input arguments for subptc:
//   String method  
//   String target  
//   double et  
//   String abcorr  
//   String obsrvr  
//   double[] spoint  (Array defined: [3])
//   double[] alt  
//     a String object for the method argument;
//     a String object for the target argument;
//     a String object for the abcorr argument;
//     a String object for the obsrvr argument;
    public static native synchronized void subptc( StringBuffer method,StringBuffer target,double et,StringBuffer abcorr,StringBuffer obsrvr,double spoint[],double alt[] );



// Input arguments for subsolc:
//   String method  
//   String target  
//   double et  
//   String abcorr  
//   String obsrvr  
//   double[] spoint  (Array defined: [3])
//     a String object for the method argument;
//     a String object for the target argument;
//     a String object for the abcorr argument;
//     a String object for the obsrvr argument;
    public static native synchronized void subsolc( StringBuffer method,StringBuffer target,double et,StringBuffer abcorr,StringBuffer obsrvr,double spoint[] );



// Input arguments for sumadc:
//   double[] array  
//   int n  
//     a double object for the SPICE function return value;
    public static native synchronized double sumadc( double array[],int n );



// Input arguments for sumaic:
//   int[] array  
//   int n  
//     an int object for the SPICE function return value;
    public static native synchronized int sumaic( int array[],int n );



// Input arguments for surfnmc:
//   double a  
//   double b  
//   double c  
//   double[] point  (Array defined: [3])
//   double[] normal  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void surfnmc( double a,double b,double c,double point[],double normal[] );



// Input arguments for surfptc:
//   double[] positn  (Array defined: [3])
//   double[] u  (Array defined: [3])
//   double a  
//   double b  
//   double c  
//   double[] point  (Array defined: [3])
//   boolean[] found  
// Returns: Nothing.
    public static native synchronized void surfptc( double positn[],double u[],double a,double b,double c,double point[],boolean found[] );



// Input arguments for swpoolc:
//   String agent  
//   int nnames  
//   int lenvals  
//   String names  
//     a String object for the agent argument;
//     a String object for the names argument;
    public static native synchronized void swpoolc( StringBuffer agent,int nnames,int lenvals,StringBuffer names );



// Input arguments for sxformc:
//   String from  
//   String to  
//   double et  
//   double[] xform  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a String object for the from argument;
//     a String object for the to argument;
    public static native synchronized void sxformc( StringBuffer from,StringBuffer to,double et,double xform[] );



// Input arguments for szpoolc:
//   String name  
//   int[] n  
//   boolean[] found  
//     a String object for the name argument;
    public static native synchronized void szpoolc( StringBuffer name,int n[],boolean found[] );



// Input arguments for timdefc:
//   String action  
//   String item  
//   int lenout  
//   String value  
//     a String object for the action argument;
//     a String object for the item argument;
//     a String object for the value argument;
    public static native synchronized void timdefc( StringBuffer action,StringBuffer item,int lenout,StringBuffer value );



// Input arguments for timoutc:
//   double et  
//   String pictur  
//   int lenout  
//   String output  
//     a String object for the pictur argument;
//     a String object for the output argument;
    public static native synchronized void timoutc( double et,StringBuffer pictur,int lenout,StringBuffer output );



// Input arguments for tipbodc:
//   String ref  
//   int body  
//   double et  
//   double[] tipm  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a String object for the ref argument;
    public static native synchronized void tipbodc( StringBuffer ref,int body,double et,double tipm[] );



// Input arguments for tisbodc:
//   String ref  
//   int body  
//   double et  
//   double[] tsipm  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a String object for the ref argument;
    public static native synchronized void tisbodc( StringBuffer ref,int body,double et,double tsipm[] );



// Input arguments for tkvrsnc:
//   String item  
//     a String object for the SPICE function return value;
//     a String object for the item argument;
    public static native synchronized String tkvrsnc( StringBuffer item );



// Input arguments for tparsec:
//   String string  
//   int lenout  
//   double[] sp2000  
//   String errmsg  
//     a String object for the string argument;
    public static native synchronized void tparsec( StringBuffer string,int lenout,double sp2000[],StringBuffer errmsg );



// Input arguments for tpictrc:
//   String sample  
//   int lenout  
//   int lenerr  
//   String pictur  
//   boolean[] ok  
//   String errmsg  
//     a String object for the sample argument;
//     a String object for the pictur argument;
    public static native synchronized void tpictrc( StringBuffer sample,int lenout,int lenerr,StringBuffer pictur,boolean ok[],StringBuffer errmsg );



// Input arguments for tracec:
//   double[] matrix  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//     a double object for the SPICE function return value;
    public static native synchronized double tracec( double matrix[] );



// Input arguments for trcoffc:
// Returns:  Nothing.
    public static native synchronized void trcoffc( );



// Input arguments for tsetyrc:
//   int year  
// Returns:  Nothing.
    public static native synchronized void tsetyrc( int year );



// Input arguments for twopic:
// Returns:  An double
    public static native synchronized double twopic( );



// Input arguments for twovecc:
//   double[] axdef  (Array defined: [3])
//   int indexa  
//   double[] plndef  (Array defined: [3])
//   int indexp  
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void twovecc( double axdef[],int indexa,double plndef[],int indexp,double mout[] );



// Input arguments for tyearc:
// Returns:  An double
    public static native synchronized double tyearc( );



// Input arguments for ucasec:
//   String in  
//   int lenout  
//   String out  
//     a String object for the in argument;
//     a String object for the out argument;
    public static native synchronized void ucasec( StringBuffer in,int lenout,StringBuffer out );



// Input arguments for ucrssc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void ucrssc( double v1[],double v2[],double vout[] );



// Note: The unionc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for unionc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void unionc( int a,int b,int c );



// Input arguments for unitimc:
//   double epoch  
//   String insys  
//   String outsys  
//     a double object for the SPICE function return value;
//     a String object for the insys argument;
//     a String object for the outsys argument;
    public static native synchronized double unitimc( double epoch,StringBuffer insys,StringBuffer outsys );



// Input arguments for unloadc:
//   String file  
//     a String object for the file argument;
    public static native synchronized void unloadc( StringBuffer file );



// Input arguments for unormc:
//   double[] v1  (Array defined: [3])
//   double[] vout  (Array defined: [3])
//   double[] vmag  
// Returns: Nothing.
    public static native synchronized void unormc( double v1[],double vout[],double vmag[] );



// Input arguments for unormgc:
//   double[] v1  
//   int ndim  
//   double[] vout  
//   double[] vmag  
// Returns: Nothing.
    public static native synchronized void unormgc( double v1[],int ndim,double vout[],double vmag[] );



// Input arguments for utc2etc:
//   String utcstr  
//   double[] et  
//     a String object for the utcstr argument;
    public static native synchronized void utc2etc( StringBuffer utcstr,double et[] );



// Input arguments for vaddc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vaddc( double v1[],double v2[],double vout[] );



// Input arguments for vaddgc:
//   double[] v1  
//   double[] v2  
//   int ndim  
//   double[] vout  
// Returns: Nothing.
    public static native synchronized void vaddgc( double v1[],double v2[],int ndim,double vout[] );



// Note: The validc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for validc:
//   int size  
//   int n  
//   int set  
    public static native synchronized void validc( int size,int n,int set );



// Input arguments for vcrssc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vcrssc( double v1[],double v2[],double vout[] );



// Input arguments for vdistc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//     a double object for the SPICE function return value;
    public static native synchronized double vdistc( double v1[],double v2[] );



// Input arguments for vdistgc:
//   double[] v1  
//   double[] v2  
//   int ndim  
//     a double object for the SPICE function return value;
    public static native synchronized double vdistgc( double v1[],double v2[],int ndim );



// Input arguments for vdotc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//     a double object for the SPICE function return value;
    public static native synchronized double vdotc( double v1[],double v2[] );



// Input arguments for vdotgc:
//   double[] v1  
//   double[] v2  
//   int ndim  
//     a double object for the SPICE function return value;
    public static native synchronized double vdotgc( double v1[],double v2[],int ndim );



// Input arguments for vequc:
//   double[] vin  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vequc( double vin[],double vout[] );



// Input arguments for vequgc:
//   double[] vin  
//   int ndim  
//   double[] vout  
// Returns: Nothing.
    public static native synchronized void vequgc( double vin[],int ndim,double vout[] );



// Input arguments for vhatc:
//   double[] v1  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vhatc( double v1[],double vout[] );



// Input arguments for vhatgc:
//   double[] v1  
//   int ndim  
//   double[] vout  
// Returns: Nothing.
    public static native synchronized void vhatgc( double v1[],int ndim,double vout[] );



// Input arguments for vlcom3c:
//   double a  
//   double[] v1  (Array defined: [3])
//   double b  
//   double[] v2  (Array defined: [3])
//   double c  
//   double[] v3  (Array defined: [3])
//   double[] sum  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vlcom3c( double a,double v1[],double b,double v2[],double c,double v3[],double sum[] );



// Input arguments for vlcomc:
//   double a  
//   double[] v1  (Array defined: [3])
//   double b  
//   double[] v2  (Array defined: [3])
//   double[] sum  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vlcomc( double a,double v1[],double b,double v2[],double sum[] );



// Input arguments for vlcomgc:
//   int n  
//   double a  
//   double[] v1  
//   double b  
//   double[] v2  
//   double[] sum  
// Returns: Nothing.
    public static native synchronized void vlcomgc( int n,double a,double v1[],double b,double v2[],double sum[] );



// Input arguments for vminugc:
//   double[] vin  
//   int ndim  
//   double[] vout  
// Returns: Nothing.
    public static native synchronized void vminugc( double vin[],int ndim,double vout[] );



// Input arguments for vminusc:
//   double[] v1  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vminusc( double v1[],double vout[] );



// Input arguments for vnormc:
//   double[] v1  (Array defined: [3])
//     a double object for the SPICE function return value;
    public static native synchronized double vnormc( double v1[] );



// Input arguments for vnormgc:
//   double[] v1  
//   int ndim  
//     a double object for the SPICE function return value;
    public static native synchronized double vnormgc( double v1[],int ndim );



// Input arguments for vpackc:
//   double x  
//   double y  
//   double z  
//   double[] v  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vpackc( double x,double y,double z,double v[] );



// Input arguments for vperpc:
//   double[] a  (Array defined: [3])
//   double[] b  (Array defined: [3])
//   double[] p  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vperpc( double a[],double b[],double p[] );



// Input arguments for vprjp:
//   double[] vin  
//   double[] plane  
//   double[] vout  
//     an int object for the SPICE function return value;
    public static native synchronized int vprjp( double vin[],double plane[],double vout[] );



// Input arguments for vprjpi:
//   double[] vin  
//   double[] projpl  
//   double[] invpl  
//   double[] vout  
//   boolean[] found  
//     an int object for the SPICE function return value;
    public static native synchronized int vprjpi( double vin[],double projpl[],double invpl[],double vout[],boolean found[] );



// Input arguments for vprojc:
//   double[] a  (Array defined: [3])
//   double[] b  (Array defined: [3])
//   double[] p  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vprojc( double a[],double b[],double p[] );



// Input arguments for vrelc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//     a double object for the SPICE function return value;
    public static native synchronized double vrelc( double v1[],double v2[] );



// Input arguments for vrelgc:
//   double[] v1  
//   double[] v2  
//   int ndim  
//     a double object for the SPICE function return value;
    public static native synchronized double vrelgc( double v1[],double v2[],int ndim );



// Input arguments for vrotvc:
//   double[] v  (Array defined: [3])
//   double[] axis  (Array defined: [3])
//   double theta  
//   double[] r  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vrotvc( double v[],double axis[],double theta,double r[] );



// Input arguments for vsclc:
//   double s  
//   double[] v1  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vsclc( double s,double v1[],double vout[] );



// Input arguments for vsclgc:
//   double s  
//   double[] v1  
//   int ndim  
//   double[] vout  
// Returns: Nothing.
    public static native synchronized void vsclgc( double s,double v1[],int ndim,double vout[] );



// Input arguments for vsepc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//     a double object for the SPICE function return value;
    public static native synchronized double vsepc( double v1[],double v2[] );



// Input arguments for vsepgc:
//   double[] v1  
//   double[] v2  
//   int ndim  
//     a double object for the SPICE function return value;
    public static native synchronized double vsepgc( double v1[],double v2[],int ndim );



// Input arguments for vsubc:
//   double[] v1  (Array defined: [3])
//   double[] v2  (Array defined: [3])
//   double[] vout  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void vsubc( double v1[],double v2[],double vout[] );



// Input arguments for vsubgc:
//   double[] v1  
//   double[] v2  
//   int ndim  
//   double[] vout  
// Returns: Nothing.
    public static native synchronized void vsubgc( double v1[],double v2[],int ndim,double vout[] );



// Input arguments for vtmvc:
//   double[] v1  (Array defined: [3])
//   double[] matrix  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] v2  (Array defined: [3])
//     a double object for the SPICE function return value;
    public static native synchronized double vtmvc( double v1[],double matrix[],double v2[] );



// Input arguments for vtmvgc:
//   String v1  
//   String matrix  
//   String v2  
//   int nrow  
//   int ncol  
//     a double object for the SPICE function return value;
//     a String object for the v1 argument;
//     a String object for the matrix argument;
//     a String object for the v2 argument;
    public static native synchronized double vtmvgc( StringBuffer v1,StringBuffer matrix,StringBuffer v2,int nrow,int ncol );



// Input arguments for vupackc:
//   double[] v  (Array defined: [3])
//   double[] x  
//   double[] y  
//   double[] z  
// Returns: Nothing.
    public static native synchronized void vupackc( double v[],double x[],double y[],double z[] );



// Input arguments for vzeroc:
//   double[] v  (Array defined: [3])
//     a boolean object for the SPICE function return value;
    public static native synchronized boolean vzeroc( double v[] );



// Input arguments for vzerogc:
//   double[] v  
//   int ndim  
//     a boolean object for the SPICE function return value;
    public static native synchronized boolean vzerogc( double v[],int ndim );



// Note: The wncomdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wncomdc:
//   double left  
//   double right  
//   int window  
//   int result  
    public static native synchronized void wncomdc( double left,double right,int window,int result );



// Note: The wncondc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wncondc:
//   double left  
//   double right  
//   int window  
    public static native synchronized void wncondc( double left,double right,int window );



// Note: The wndifdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wndifdc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void wndifdc( int a,int b,int c );



// Note: The wnelmdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnelmdc:
//   double point  
//   int window  
    public static native synchronized boolean wnelmdc( double point,int window );



// Note: The wnexpdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnexpdc:
//   double left  
//   double right  
//   int window  
    public static native synchronized void wnexpdc( double left,double right,int window );



// Note: The wnextdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnextdc:
//   char side  
//   int window  
    public static native synchronized void wnextdc( char side,int window );



// Note: The wnfetdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnfetdc:
//   int window  
//   int n  
//   double[] left  
//   double[] right  
    public static native synchronized void wnfetdc( int window,int n,double left[],double right[] );



// Note: The wnfildc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnfildc:
//   double small  
//   int window  
    public static native synchronized void wnfildc( double small,int window );



// Note: The wnfltdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnfltdc:
//   double small  
//   int window  
    public static native synchronized void wnfltdc( double small,int window );



// Note: The wnincdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnincdc:
//   double left  
//   double right  
//   int window  
    public static native synchronized boolean wnincdc( double left,double right,int window );



// Note: The wninsdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wninsdc:
//   double left  
//   double right  
//   int window  
    public static native synchronized void wninsdc( double left,double right,int window );



// Note: The wnintdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnintdc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void wnintdc( int a,int b,int c );



// Note: The wnreldc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnreldc:
//   int a  
//   String op  
//   int b  
    public static native synchronized boolean wnreldc( int a,StringBuffer op,int b );



// Note: The wnsumdc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnsumdc:
//   int window  
//   double[] meas  
//   double[] avg  
//   double[] stddev  
//   int[] shortest  
//   int[] longest  
    public static native synchronized void wnsumdc( int window,double meas[],double avg[],double stddev[],int shortest[],int longest[] );



// Note: The wnunidc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnunidc:
//   int a  
//   int b  
//   int c  
    public static native synchronized void wnunidc( int a,int b,int c );



// Note: The wnvaldc function is not implemented and if called
// will only raise a NoSuchMethodException.
// Reason for no auto implementation: Function has an unimplemented SPICE datatype (from SpiceCell *)\n// Unimplemented datatypes are defined as int placeholders.
// Input arguments for wnvaldc:
//   int size  
//   int n  
//   int window  
    public static native synchronized void wnvaldc( int size,int n,int window );



// Input arguments for xf2eulc:
//   double[] xform  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   int axisa  
//   int axisb  
//   int axisc  
//   double[] eulang  (Array defined: [6])
//   boolean[] unique  
// Returns: Nothing.
    public static native synchronized void xf2eulc( double xform[],int axisa,int axisb,int axisc,double eulang[],boolean unique[] );



// Input arguments for xf2ravc:
//   double[] xform  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] rot  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] av  (Array defined: [3])
// Returns: Nothing.
    public static native synchronized void xf2ravc( double xform[],double rot[],double av[] );



// Input arguments for xpose6c:
//   double[] m1  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [6][6] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void xpose6c( double m1[],double mout[] );



// Input arguments for xposec:
//   double[] m1  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
//   double[] mout  (Array defined: [3][3] multidimensional arrays should be
//            be passed as a single dimension, lowest order first.)
// Returns: Nothing.
    public static native synchronized void xposec( double m1[],double mout[] );



// Input arguments for xposegc:
//   String matrix  
//   int nrow  
//   int ncol  
//   String xposem  
//     a String object for the matrix argument;
//     a String object for the xposem argument;
    public static native synchronized void xposegc( StringBuffer matrix,int nrow,int ncol,StringBuffer xposem );




} // End of JSpice class definition.  
/*
 * Classes to be used for Spice Ellipses and Planes.  Just stubs for now, but may someday
 * be needed.
 */

class JSpiceEllipse {
	double center[];
	double vector1[];
	double vector2[];

	public void JSpiceEllipse (double c[], double v1[], double v2[]) {
		throw new UnsupportedOperationException("JSpiceEllipse Object is unimplemented.");
	}
}


class JSpicePlane {
	double normal[];
	double point[];

	public void JSpicePlane (double n[], double p[]) {
		throw new UnsupportedOperationException("JSpicePlane Object is not implemented.");
	}
}


class JSpiceCell {
	public void JSpiceCell () {
		throw new UnsupportedOperationException("JSpiceCell Object is not implemented.");
	}
}

